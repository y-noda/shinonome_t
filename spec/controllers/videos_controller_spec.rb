require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe VideosController, type: :controller do
  let(:valid_session) { {} }
  let(:video) { create(:video) }
  let(:general_user) { create(:user) }

  before do
    login_user general_user
  end

  describe "GET #index" do
    before do
      get :index, { category_id: video.category }, valid_session
    end

    it "@videos にビデオリストを設定する" do
      expect(assigns(:videos)).to eq([video])
    end

    it 'index テンプレートを表示する' do
      expect(response).to render_template :index
    end
  end

  describe 'GET #show' do
    before do
      get :show, { id: video.id }, valid_session
    end

    it '@video にビデオを設定する' do
      expect(assigns(:video)).to eq(video)
    end

    it '@category にビデオのカテゴリを設定する' do
      expect(assigns(:category)).to eq(video.category)
    end

    it '@comments にビデオのコメントを設定する' do
      # User データも含めたデータを設定すること
      expect(assigns(:comments)).to eq(video.comments.includes(:user))
    end

    it '@comment に新しいコメントを設定する' do
      expect(assigns(:comment)).to be_a_new(Comment)
    end

    it 'show テンプレートを表示する' do
      expect(response).to render_template :show
    end
  end

  describe "POST #create" do
    it "存在しない" do
      expect{
        post :create, video: attributes_for(:video), category_id: video.category
      }.to raise_error(AbstractController::ActionNotFound)
    end
  end

  describe "PATCH #update" do
    it "存在しない" do
      expect{
        patch :update, id: video, video: attributes_for(:video)
      }.to raise_error(AbstractController::ActionNotFound)
    end
  end

  describe "DELETE #destroy" do
    it "存在しない" do
      expect{
        delete :destroy, id: video
      }.to raise_error(AbstractController::ActionNotFound)
    end
  end

end
